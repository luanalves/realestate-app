extend type Query {
    "List all real estate agencies"
    realEstates(
        first: Int = 10
        page: Int = 1
        orderBy: [OrderByClause!]
    ): RealEstatePaginator! @field(resolver: "Modules\\RealEstate\\GraphQL\\Queries\\RealEstates")

    "Get a specific real estate agency by ID"
    realEstateById(id: ID!): RealEstate @field(resolver: "Modules\\RealEstate\\GraphQL\\Queries\\RealEstateById")
}

extend type Mutation {
    "Create a new real estate agency"
    createRealEstate(
        name: String! @rules(apply: ["required", "string", "max:255"]),
        fantasy_name: String @rules(apply: ["nullable", "string", "max:255"]),
        cnpj: String! @rules(apply: ["required", "string", "size:14", "unique:real_estates,cnpj"]),
        description: String @rules(apply: ["nullable", "string", "max:1000"]),
        email: String! @rules(apply: ["required", "email", "unique:real_estates,email"]),
        phone: String @rules(apply: ["nullable", "string", "max:20"]),
        website: String @rules(apply: ["nullable", "url", "max:255"]),
        creci: String @rules(apply: ["nullable", "string", "max:50"]),
        state_registration: String @rules(apply: ["nullable", "string", "max:50"]),
        legal_representative: String @rules(apply: ["nullable", "string", "max:255"]),
        active: Boolean = true,
        address: RealEstateAddressInput
    ): RealEstate! @field(resolver: "Modules\\RealEstate\\GraphQL\\Mutations\\CreateRealEstate")

    "Update an existing real estate agency"
    updateRealEstate(
        id: ID!,
        input: UpdateRealEstateInput! @spread
    ): RealEstate! @field(resolver: "Modules\\RealEstate\\GraphQL\\Mutations\\UpdateRealEstate")

    "Delete a real estate agency"
    deleteRealEstate(id: ID!): RealEstate! @field(resolver: "Modules\\RealEstate\\GraphQL\\Mutations\\DeleteRealEstate")
}

"Real Estate Agency"
type RealEstate {
    "Unique identifier"
    id: ID!

    "Agency name"
    name: String!

    "Agency description"
    description: String

    "Contact email"
    email: String!

    "Contact phone"
    phone: String

    "Website URL"
    website: String

    "Main address (headquarters) information"
    address: RealEstateAddress @field(resolver: "Modules\\RealEstate\\GraphQL\\Queries\\RealEstateHeadquarters")

    "All addresses (headquarters and branches)"
    addresses: [RealEstateAddress!]! @hasMany

    "Branch addresses only"
    branches: [RealEstateAddress!] @field(resolver: "Modules\\RealEstate\\GraphQL\\Queries\\RealEstateBranches")

    "CRECI license number"
    creci: String

    "Whether the agency is active"
    active: Boolean!

    "Tenant ID for multi-tenant support"
    tenant_id: ID

    "Creation date"
    created_at: DateTime!

    "Last update date"
    updated_at: DateTime!

    "Users associated with this real estate agency"
    users: [User!]! @hasMany
    
    "All addresses of this real estate agency"
    addresses: [RealEstateAddress!]! @hasMany
    
    "Headquarters address of this real estate agency"
    headquarters: RealEstateAddress @field(resolver: "Modules\\RealEstate\\GraphQL\\Queries\\RealEstateHeadquarters")
    
    "Branch addresses of this real estate agency"
    branches: [RealEstateAddress!]! @field(resolver: "Modules\\RealEstate\\GraphQL\\Queries\\RealEstateBranches")
}

"Real Estate Address"
type RealEstateAddress {
    "Unique identifier"
    id: ID!
    
    "Address type (headquarters or branch)"
    type: String!
    
    "Street address"
    street: String!

    "Street number"
    number: String!
    
    "Complement"
    complement: String
    
    "Neighborhood"
    neighborhood: String!
    
    "City"
    city: String!

    "State"
    state: String!

    "ZIP/Postal code"
    zip_code: String!

    "Country"
    country: String
    
    "Whether the address is active"
    active: Boolean!
    
    "Creation timestamp"
    created_at: DateTime!
    
    "Last update timestamp"
    updated_at: DateTime!
}

"Input for creating a real estate agency"
input CreateRealEstateInput {
    "Agency name"
    name: String! @rules(apply: ["required", "string", "max:255"])

    "Agency description"
    description: String @rules(apply: ["nullable", "string", "max:1000"])

    "Contact email"
    email: String! @rules(apply: ["required", "email", "unique:real_estates,email"])

    "Contact phone"
    phone: String @rules(apply: ["nullable", "string", "max:20"])

    "Website URL"
    website: String @rules(apply: ["nullable", "url", "max:255"])

    "Address information"
    address: RealEstateAddressInput

    "CRECI license number"
    creci: String @rules(apply: ["nullable", "string", "max:50"])

    "Whether the agency is active"
    active: Boolean = true

    "Tenant ID for multi-tenant support"
    tenant_id: ID @rules(apply: ["nullable", "exists:tenants,id"])
}

"Input for updating a real estate agency"
input UpdateRealEstateInput {
    "Agency name"
    name: String @rules(apply: ["string", "max:255"])

    "Agency description"
    description: String @rules(apply: ["nullable", "string", "max:1000"])

    "Contact email"
    email: String @rules(apply: ["email", "unique:real_estates,email"])

    "Contact phone"
    phone: String @rules(apply: ["nullable", "string", "max:20"])

    "Website URL"
    website: String @rules(apply: ["nullable", "url", "max:255"])

    "Address information"
    address: RealEstateAddressInput

    "CRECI license number"
    creci: String @rules(apply: ["nullable", "string", "max:50"])

    "Whether the agency is active"
    active: Boolean

    "Tenant ID for multi-tenant support"
    tenant_id: ID @rules(apply: ["nullable", "exists:tenants,id"])
}

"Input for real estate address"
input RealEstateAddressInput {
    "Street address"
    street: String @rules(apply: ["nullable", "string", "max:255"])

    "City"
    city: String @rules(apply: ["nullable", "string", "max:100"])

    "State"
    state: String @rules(apply: ["nullable", "string", "max:100"])

    "ZIP/Postal code"
    zip_code: String @rules(apply: ["nullable", "string", "max:20"])

    "Country"
    country: String @rules(apply: ["nullable", "string", "max:100"])
}

"Paginated real estate agencies"
type RealEstatePaginator {
    "Pagination metadata"
    paginatorInfo: PaginatorInfo!

    "List of real estate agencies"
    data: [RealEstate!]!
}
