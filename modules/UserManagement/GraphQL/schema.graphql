"""
User management related queries
"""
type Query {
    """
    Get currently authenticated user
    """
    me: User @field(resolver: "Modules\\UserManagement\\GraphQL\\Queries\\Me")
    
    """
    Get all users (requires authentication)
    """
    users: [User!]! @field(resolver: "Modules\\UserManagement\\GraphQL\\Queries\\Users")

    """
    Get a user by ID (requires authentication)
    """
    user(id: ID!): User @field(resolver: "Modules\\UserManagement\\GraphQL\\Queries\\User")
}

type Mutation {
    """
    Create a new user
    """
    createUser(input: CreateUserInput!): User @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\CreateUser")
    
    """
    Update an existing user
    """
    updateUser(id: ID!, input: UpdateUserInput!): User @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\UpdateUser")
    
    """
    Delete a user
    """
    deleteUser(id: ID!): DeleteUserResponse @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\DeleteUser")
        
    """
    Change user's password (requires authentication)
    """
    changePassword(
        current_password: String!, 
        new_password: String!, 
        new_password_confirmation: String!
    ): PasswordChangeResponse! 
        @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\ChangePassword")
        
    """
    Request a password reset link (doesn't require authentication)
    """
    requestPasswordReset(
        email: String!
    ): RequestPasswordResetResponse! 
        @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\RequestPasswordReset")
        
    """
    Reset password using token (doesn't require authentication)
    """
    resetPassword(
        email: String!, 
        token: String!, 
        password: String!, 
        password_confirmation: String!
    ): PasswordResetResponse! 
        @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\ResetPassword")
        
    """
    Update user profile (requires authentication)
    """
    updateProfile(
        name: String,
        email: String
    ): ProfileUpdateResponse!
        @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\UpdateProfile")
        
    """
    Update user preferences (requires authentication)
    """
    updatePreferences(
        preferences: JSON!
    ): PreferencesUpdateResponse!
        @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\UpdatePreferences")
        
    """
    Set user active status (admin only)
    """
    setUserActiveStatus(
        user_id: ID!,
        is_active: Boolean!
    ): UserActiveStatusResponse!
        @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\SetUserActiveStatus")
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
    role_id: ID!
    is_active: Boolean = true
}

input UpdateUserInput {
    name: String
    email: String
    password: String
    role_id: ID
    is_active: Boolean
}

"""
User object
"""
type User {
    id: ID!
    name: String!
    email: String!
    role: Role @belongsTo
    preferences: JSON
    tenant_id: ID
    is_active: Boolean!
    created_at: String
    updated_at: String
}

type Role {
    id: ID!
    name: String!
    description: String
    users: [User!]! @hasMany
}

"""
@deprecated Use the OAuth endpoint /oauth/token instead
"""
type LoginResponse {
    access_token: String!
    token_type: String!
    expires_in: Int!
    user: User!
}

type DeleteUserResponse {
    success: Boolean!
    message: String!
}

"""
Response for password change operation
"""
type PasswordChangeResponse {
    success: Boolean!
    message: String!
}

"""
Response for password reset request operation
"""
type RequestPasswordResetResponse {
    success: Boolean!
    message: String!
}

"""
Response for password reset operation
"""
type PasswordResetResponse {
    success: Boolean!
    message: String!
}

"""
Response for profile update operation
"""
type ProfileUpdateResponse {
    success: Boolean!
    message: String!
    user: User
}

"""
Response for preferences update operation
"""
type PreferencesUpdateResponse {
    success: Boolean!
    message: String!
    preferences: JSON
}

"""
Response for user active status update operation
"""
type UserActiveStatusResponse {
    success: Boolean!
    message: String!
    user: User
}
