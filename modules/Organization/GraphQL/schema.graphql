"""
Schema GraphQL para o módulo Organization
"""

"""
Interface que representa qualquer tipo de organização no sistema
"""
interface Organization {
    "ID única da organização"
    id: ID!
    
    "Nome da organização"
    name: String!
    
    "Descrição da organização"
    description: String
    
    "Email de contato principal"
    email: String
    
    "Telefone de contato principal"
    phone: String
    
    "Website da organização"
    website: String
    
    "Indica se a organização está ativa"
    active: Boolean!
    
    "Membros da organização"
    members: [OrganizationMembership!]! @morphMany
    
    "Membros ativos da organização"
    activeMembers: [OrganizationMembership!]! @morphMany(relation: "activeMembers")
    
    "Endereço principal da organização"
    mainAddress: OrganizationAddress
    
    "Endereços da organização"
    addresses: [OrganizationAddress!]!
    
    "Data de criação"
    createdAt: DateTime!
    
    "Data da última atualização"
    updatedAt: DateTime!
}

"""
OrganizationMembership - Representa a relação entre um usuário e uma organização
"""
type OrganizationMembership {
    "ID única do registro de associação"
    id: ID!
    
    "Usuário associado à organização"
    user: User! @belongsTo
    
    "Papel do usuário na organização (admin, manager, member, etc)"
    role: String
    
    "Cargo/posição do usuário na organização"
    position: String
    
    "Indica se o usuário está ativo na organização"
    isActive: Boolean!
    
    "Data em que o usuário entrou na organização"
    joinedAt: DateTime
    
    "Data de criação do registro"
    createdAt: DateTime!
    
    "Data da última atualização do registro"
    updatedAt: DateTime!
}


"""
OrganizationAddress - Endereço de uma organização
"""
type OrganizationAddress {
    "ID único do endereço"
    id: ID!
    
    "Tipo do endereço (matriz, filial)"
    type: String!
    
    "Logradouro"
    street: String!
    
    "Número"
    number: String
    
    "Complemento"
    complement: String
    
    "Bairro"
    neighborhood: String!
    
    "Cidade"
    city: String!
    
    "Estado"
    state: String!
    
    "CEP"
    zipCode: String!
    
    "País"
    country: String!
    
    "Indica se o endereço está ativo"
    active: Boolean!
    
    "Data de criação"
    createdAt: DateTime!
    
    "Data da última atualização"
    updatedAt: DateTime!
}

"""
Input para criação de endereço de organização
"""
input OrganizationAddressInput {
    "Tipo do endereço (matriz, filial)"
    type: String! = "branch"
    
    "Logradouro"
    street: String!
    
    "Número"
    number: String
    
    "Complemento"
    complement: String
    
    "Bairro"
    neighborhood: String!
    
    "Cidade"
    city: String!
    
    "Estado"
    state: String!
    
    "CEP"
    zipCode: String!
    
    "País"
    country: String! = "BR"
}

"""
Input para atualização de endereço de organização
"""
input UpdateOrganizationAddressInput {
    "Tipo do endereço (matriz, filial)"
    type: String
    
    "Logradouro"
    street: String
    
    "Número"
    number: String
    
    "Complemento"
    complement: String
    
    "Bairro"
    neighborhood: String
    
    "Cidade"
    city: String
    
    "Estado"
    state: String
    
    "CEP"
    zipCode: String
    
    "País"
    country: String
    
    "Indica se o endereço está ativo"
    active: Boolean
}

extend type User {
    "Associações do usuário com organizações"
    organizationMemberships: [OrganizationMembership!]! @hasMany
}

extend type Query {
    "Obter um endereço de organização pelo ID"
    organizationAddressById(id: ID!): OrganizationAddress @field(resolver: "Modules\\Organization\\GraphQL\\Queries\\OrganizationAddressById")
    
    "Obter todos os endereços de uma organização"
    addressesByOrganizationId(
        organizationId: ID!
        organizationType: String!
    ): [OrganizationAddress!]! @field(resolver: "Modules\\Organization\\GraphQL\\Queries\\AddressesByOrganizationId")
}
extend type Mutation {
    "Adicionar um membro à organização"
    addOrganizationMember(
        organizationType: String!  # Valores de OrganizationConfig::ORGANIZATION_TYPE_*
        organizationId: ID!
        userId: ID!
        role: String!           # Valores de OrganizationConfig::ROLE_*
        position: String
        joinedAt: DateTime
    ): Boolean! @field(resolver: "Modules\\Organization\\GraphQL\\Mutations\\AddOrganizationMember")
    
    "Remover um membro da organização"
    removeOrganizationMember(
        organizationId: ID!
        organizationType: String!
        userId: ID!
    ): Boolean! @field(resolver: "Modules\\Organization\\GraphQL\\Mutations\\RemoveOrganizationMember")
    
    "Atualizar informações do membro na organização"
    updateOrganizationMember(
        organizationId: ID!
        organizationType: String!
        userId: ID!
        role: String
        position: String
        isActive: Boolean
    ): Boolean! @field(resolver: "Modules\\Organization\\GraphQL\\Mutations\\UpdateOrganizationMember")
    
    "Criar um novo endereço para uma organização existente"
    createOrganizationAddress(
        organizationId: ID! @rules(apply: ["required"]),
        organizationType: String! @rules(apply: ["required"]),
        input: OrganizationAddressInput! @spread
    ): OrganizationAddress! @field(resolver: "Modules\\Organization\\GraphQL\\Mutations\\CreateOrganizationAddress")
    
    "Atualizar um endereço de organização existente"
    updateOrganizationAddress(
        id: ID!,
        input: UpdateOrganizationAddressInput! @spread
    ): OrganizationAddress! @field(resolver: "Modules\\Organization\\GraphQL\\Mutations\\UpdateOrganizationAddress")
    
    "Remover um endereço de organização"
    deleteOrganizationAddress(id: ID!): OrganizationAddress! @field(resolver: "Modules\\Organization\\GraphQL\\Mutations\\DeleteOrganizationAddress")
}
