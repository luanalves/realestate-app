"""
GraphQL schema for Organization module
"""

"""
Generic organization type
"""
type Organization {
    "Organization unique ID"
    id: ID!
    
    "Organization name"
    name: String!
    
    "Organization fantasy name"
    fantasyName: String
    
    "Organization CNPJ"
    cnpj: String
    
    "Organization description"
    description: String
    
    "Primary contact email"
    email: String
    
    "Primary contact phone"
    phone: String
    
    "Organization website"
    website: String
    
    "Whether the organization is active"
    active: Boolean!
    
    "Organization type"
    organizationType: String!
    
    "Organization members"
    members: [OrganizationMembership!]! @morphMany
    
    "Active organization members"
    activeMembers: [OrganizationMembership!]! @morphMany(relation: "activeMembers")
    
    "Organization main address"
    mainAddress: OrganizationAddress
    
    "Organization addresses"
    addresses: [OrganizationAddress!]!
    
    "Creation date"
    createdAt: DateTime!
    
    "Last update date"
    updatedAt: DateTime!
}

"""
OrganizationMembership - Represents the relationship between a user and organization
"""
type OrganizationMembership {
    "Membership unique ID"
    id: ID!
    
    "User associated with the organization"
    user: User! @belongsTo
    
    "User role in the organization (admin, manager, member, etc)"
    role: String
    
    "User position/job title in the organization"
    position: String
    
    "Whether the user is active in the organization"
    isActive: Boolean!
    
    "Date when the user joined the organization"
    joinedAt: DateTime
    
    "Creation date"
    createdAt: DateTime!
    
    "Last update date"
    updatedAt: DateTime!
}


"""
OrganizationAddress - Organization address
"""
type OrganizationAddress {
    "Address unique ID"
    id: ID!
    
    "Address type (headquarters, branch)"
    type: String!
    
    "Street"
    street: String!
    
    "Number"
    number: String
    
    "Complement"
    complement: String
    
    "Neighborhood"
    neighborhood: String!
    
    "City"
    city: String!
    
    "State"
    state: String!
    
    "ZIP code"
    zipCode: String!
    
    "Country"
    country: String!
    
    "Whether the address is active"
    active: Boolean!
    
    "Creation date"
    createdAt: DateTime!
    
    "Last update date"
    updatedAt: DateTime!
}

"""
Input for creating organization address
"""
input OrganizationAddressInput {
    "Address type (headquarters, branch)"
    type: String! = "branch"
    
    "Street"
    street: String!
    
    "Number"
    number: String
    
    "Complement"
    complement: String
    
    "Neighborhood"
    neighborhood: String!
    
    "City"
    city: String!
    
    "State"
    state: String!
    
    "ZIP code"
    zipCode: String!
    
    "Country"
    country: String! = "BR"
}

"""
Input for updating organization address
"""
input UpdateOrganizationAddressInput {
    "Address type (headquarters, branch)"
    type: String
    
    "Street"
    street: String
    
    "Number"
    number: String
    
    "Complement"
    complement: String
    
    "Neighborhood"
    neighborhood: String
    
    "City"
    city: String
    
    "State"
    state: String
    
    "ZIP code"
    zipCode: String
    
    "Country"
    country: String
    
    "Whether the address is active"
    active: Boolean
}

extend type User {
    "User organization memberships"
    organizationMemberships: [OrganizationMembership!]! @hasMany
}

extend type Query {
    "Get an organization by ID"
    organization(id: ID!): Organization @find
    
    "Get all organizations"
    organizations(
        first: Int = 10
        page: Int
    ): [Organization!]! @paginate
    
    "Get an organization address by ID"
    organizationAddressById(id: ID!): OrganizationAddress @field(resolver: "Modules\\Organization\\GraphQL\\Queries\\OrganizationAddressById")
    
    "Get all addresses of an organization"
    addressesByOrganizationId(
        organizationId: ID!
        organizationType: String!
    ): [OrganizationAddress!]! @field(resolver: "Modules\\Organization\\GraphQL\\Queries\\AddressesByOrganizationId")
}
extend type Mutation {
    "Add a member to organization"
    addOrganizationMember(
        organizationType: String!
        organizationId: ID!
        userId: ID!
        role: String!
        position: String
        joinedAt: DateTime
    ): Boolean! @field(resolver: "Modules\\Organization\\GraphQL\\Mutations\\AddOrganizationMember")
    
    "Remove a member from organization"
    removeOrganizationMember(
        organizationId: ID!
        organizationType: String!
        userId: ID!
    ): Boolean! @field(resolver: "Modules\\Organization\\GraphQL\\Mutations\\RemoveOrganizationMember")
    
    "Update organization member information"
    updateOrganizationMember(
        organizationId: ID!
        organizationType: String!
        userId: ID!
        role: String
        position: String
        isActive: Boolean
    ): Boolean! @field(resolver: "Modules\\Organization\\GraphQL\\Mutations\\UpdateOrganizationMember")
    
    "Create a new address for an existing organization"
    createOrganizationAddress(
        organizationId: ID! @rules(apply: ["required"]),
        organizationType: String! @rules(apply: ["required"]),
        input: OrganizationAddressInput! @spread
    ): OrganizationAddress! @field(resolver: "Modules\\Organization\\GraphQL\\Mutations\\CreateOrganizationAddress")
    
    "Update an existing organization address"
    updateOrganizationAddress(
        id: ID!,
        input: UpdateOrganizationAddressInput! @spread
    ): OrganizationAddress! @field(resolver: "Modules\\Organization\\GraphQL\\Mutations\\UpdateOrganizationAddress")
    
    "Remove an organization address"
    deleteOrganizationAddress(id: ID!): OrganizationAddress! @field(resolver: "Modules\\Organization\\GraphQL\\Mutations\\DeleteOrganizationAddress")
}
