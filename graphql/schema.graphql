"""
Main GraphQL Schema
This file combines all module schemas.
"""

#import ../modules/Organization/GraphQL/schema.graphql

scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar JSON @scalar(class: "App\\GraphQL\\Scalars\\JSON")

"""
The available pagination information.
"""
type PaginatorInfo {
    """
    Total count of available items.
    """
    count: Int!

    """
    Current page of the cursor.
    """
    currentPage: Int!

    """
    Index of the first item in the current page.
    """
    firstItem: Int

    """
    If collection has more pages.
    """
    hasMorePages: Boolean!

    """
    Index of the last item in the current page.
    """
    lastItem: Int

    """
    Last page number of the cursor.
    """
    lastPage: Int!

    """
    Number of items per page.
    """
    perPage: Int!

    """
    Total count of available items.
    """
    total: Int!
}

"""
User management related queries
"""
type Query {
    """
    Get currently authenticated user
    """
    me: User @field(resolver: "Modules\\UserManagement\\GraphQL\\Queries\\Me")
    
    """
    Get all users (requires authentication)
    """
    users: [User!]! @field(resolver: "Modules\\UserManagement\\GraphQL\\Queries\\Users")

    """
    Get a user by ID (requires authentication)
    """
    user(id: ID!): User @field(resolver: "Modules\\UserManagement\\GraphQL\\Queries\\User")
    
    """
    Get all available roles (requires authentication)
    """
    roles: [Role!]! @field(resolver: "Modules\\UserManagement\\GraphQL\\Queries\\Roles")

    """
    Get security logs with filters and pagination
    """
    securityLogs(
        filter: SecurityLogFilterInput
        orderBy: [SecurityLogOrderByInput!]
        first: Int = 20
        page: Int = 1
    ): SecurityLogsPaginated! @field(resolver: "Modules\\Security\\GraphQL\\Queries\\SecurityLogs")

    """
    Get a specific security log by ID
    """
    securityLog(id: ID!): SecurityLog @field(resolver: "Modules\\Security\\GraphQL\\Queries\\SecurityLogQuery")

    """
    Get security log statistics/summary
    """
    securityLogStats(
        filter: SecurityLogFilterInput
    ): SecurityLogStats! @field(resolver: "Modules\\Security\\GraphQL\\Queries\\SecurityLogStats")

    """
    List all real estate agencies
    """
    realEstates(
        first: Int = 10
        page: Int = 1
        orderBy: [OrderByClause!]
    ): [RealEstate!]! @paginate(model: "Modules\\RealEstate\\Models\\RealEstate")

    """
    Get a specific real estate agency by ID
    """
    realEstateById(id: ID!): RealEstate @find

    # """
    # Get a specific real estate address by ID
    # """
    # realEstateAddressById(id: ID!): RealEstateAddress @field(resolver: "Modules\\RealEstate\\GraphQL\\Queries\\RealEstateAddressById")
    
    # """
    # Get all addresses for a specific real estate agency
    # """
    # addressesByRealEstateId(realEstateId: ID!): [RealEstateAddress!]! @field(resolver: "Modules\\RealEstate\\GraphQL\\Queries\\AddressesByRealEstateId")
}

type Mutation {
    """
    Create a new user
    """
    createUser(input: CreateUserInput!): User @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\CreateUser")
    
    """
    Update an existing user
    """
    updateUser(id: ID!, input: UpdateUserInput!): User @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\UpdateUser")
    
    """
    Delete a user
    """
    deleteUser(id: ID!): DeleteUserResponse @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\DeleteUser")

    """
    Change user's password (requires authentication)
    """
    changePassword(
        current_password: String!, 
        new_password: String!, 
        new_password_confirmation: String!
    ): PasswordChangeResponse! 
        @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\ChangePassword")
        
    """
    Request a password reset link (doesn't require authentication)
    """
    requestPasswordReset(
        email: String!
    ): RequestPasswordResetResponse! 
        @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\RequestPasswordReset")
        
    """
    Reset password using token (doesn't require authentication)
    """
    resetPassword(
        email: String!, 
        token: String!, 
        password: String!, 
        password_confirmation: String!
    ): PasswordResetResponse! 
        @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\ResetPassword")
        
    """
    Update user profile (requires authentication)
    """
    updateProfile(
        name: String,
        email: String
    ): ProfileUpdateResponse!
        @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\UpdateProfile")
        
    """
    Update user preferences (requires authentication)
    """
    updatePreferences(
        preferences: JSON!
    ): PreferencesUpdateResponse!
        @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\UpdatePreferences")
        
    """
    Set user active status (admin only)
    """
    setUserActiveStatus(
        user_id: ID!,
        is_active: Boolean!
    ): UserActiveStatusResponse!
        @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\SetUserActiveStatus")

    """
    Create a new real estate agency
    """
    createRealEstate(
        name: String! @rules(apply: ["required", "string", "max:255"]),
        fantasy_name: String @rules(apply: ["nullable", "string", "max:255"]),
        cnpj: String! @rules(apply: ["required", "string", "size:14", "unique:real_estates,cnpj"]),
        description: String @rules(apply: ["nullable", "string", "max:1000"]),
        email: String! @rules(apply: ["required", "email", "unique:real_estates,email"]),
        phone: String @rules(apply: ["nullable", "string", "max:20"]),
        website: String @rules(apply: ["nullable", "url", "max:255"]),
        creci: String @rules(apply: ["nullable", "string", "max:50"]),
        state_registration: String @rules(apply: ["nullable", "string", "max:50"]),
        legal_representative: String @rules(apply: ["nullable", "string", "max:255"]),
        active: Boolean = true,
        address: RealEstateAddressInput
    ): RealEstate! @field(resolver: "Modules\\RealEstate\\GraphQL\\Mutations\\CreateRealEstateResolver")

    """
    Update an existing real estate agency
    """
    updateRealEstate(
        id: ID!,
        input: UpdateRealEstateInput! @spread
    ): RealEstate! @field(resolver: "Modules\\RealEstate\\GraphQL\\Mutations\\UpdateRealEstateResolver")

    """
    Delete a real estate agency
    """
    deleteRealEstate(id: ID!): RealEstate! @field(resolver: "Modules\\RealEstate\\GraphQL\\Mutations\\DeleteRealEstateOrganizationResolver")

    # """
    # Create a new address for an existing real estate agency
    # """
    # createRealEstateAddress(
    #     realEstateId: ID! @rules(apply: ["required", "exists:real_estates,id"]),
    #     input: CreateRealEstateAddressInput!
    # ): RealEstateAddress! @field(resolver: "Modules\\RealEstate\\GraphQL\\Mutations\\CreateRealEstateAddressMutation")
    
    # """
    # Update an existing real estate address
    # """
    # updateRealEstateAddress(
    #     id: ID!,
    #     input: UpdateRealEstateAddressInput!
    # ): RealEstateAddress! @field(resolver: "Modules\\RealEstate\\GraphQL\\Mutations\\UpdateRealEstateAddressMutation")
    
    # """
    # Delete a real estate address
    # """
    # deleteRealEstateAddress(id: ID!): RealEstateAddress! @field(resolver: "Modules\\RealEstate\\GraphQL\\Mutations\\DeleteRealEstateAddressMutation")
}

# User Management Types
input CreateUserInput {
    name: String!
    email: String!
    password: String!
    role_id: ID!
    is_active: Boolean = true
}

input UpdateUserInput {
    name: String
    email: String
    password: String
    role_id: ID
    is_active: Boolean
}

"""
User object
"""
type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    preferences: JSON
    tenant_id: ID
    is_active: Boolean!
    created_at: DateTime!
    updated_at: DateTime!
    role: Role @belongsTo
}

"""
Role object
"""
type Role {
    id: ID!
    name: String!
    display_name: String
    description: String
    created_at: DateTime!
    updated_at: DateTime!
    
    users: [User!]! @hasMany
}

"""
Login response object
@deprecated Use the OAuth endpoint /oauth/token instead
"""
type LoginResponse {
    access_token: String!
    token_type: String!
    expires_in: Int!
    user: User!
}

"""
Delete user response object
"""
type DeleteUserResponse {
    success: Boolean!
    message: String!
}

"""
Password change response
"""
type PasswordChangeResponse {
    success: Boolean!
    message: String!
}

"""
Request password reset response
"""
type RequestPasswordResetResponse {
    success: Boolean!
    message: String!
}

"""
Password reset response
"""
type PasswordResetResponse {
    success: Boolean!
    message: String!
}

"""
Profile update response
"""
type ProfileUpdateResponse {
    success: Boolean!
    message: String!
}

"""
Preferences update response
"""
type PreferencesUpdateResponse {
    success: Boolean!
    message: String!
}

"""
User active status update response
"""
type UserActiveStatusResponse {
    success: Boolean!
    message: String!
    user: User
}

# Security Module Types
"""
Security log entry
"""
type SecurityLog {
    id: ID!
    uuid: String!
    user_id: ID
    email: String
    operation: String!
    module: String
    ip_address: String!
    status: SecurityLogStatus!
    created_at: DateTime!
    updated_at: DateTime!
    
    """
    Related user (if exists)
    """
    user: User @belongsTo
    
    """
    Detailed log information from MongoDB
    """
    details: SecurityLogDetails @field(resolver: "Modules\\Security\\GraphQL\\Queries\\SecurityLogDetails")
}

"""
Paginated security logs response
"""
type SecurityLogsPaginated {
    data: [SecurityLog!]!
    paginatorInfo: PaginatorInfo!
}

"""
Security log statistics
"""
type SecurityLogStats {
    total_requests: Int!
    unique_users: Int!
    success_rate: Float!
    top_operations: [OperationStat!]!
    top_modules: [ModuleStat!]!
    requests_by_status: [StatusStat!]!
    requests_by_hour: [HourStat!]!
}

"""
Operation statistics
"""
type OperationStat {
    operation: String!
    count: Int!
    percentage: Float!
}

"""
Module statistics
"""
type ModuleStat {
    module: String!
    count: Int!
    percentage: Float!
}

"""
Status statistics
"""
type StatusStat {
    status: SecurityLogStatus!
    count: Int!
    percentage: Float!
}

"""
Hourly request statistics
"""
type HourStat {
    hour: Int!
    count: Int!
}

"""
Detailed log information from MongoDB
"""
type SecurityLogDetails {
    request: RequestDetails
    response: ResponseDetails
    execution: ExecutionDetails
}

"""
Request details
"""
type RequestDetails {
    headers: JSON
    variables: JSON
    query: String
    user_agent: String
    timestamp: String
}

"""
Response details
"""
type ResponseDetails {
    status_code: Int
    headers: JSON
    data: JSON
    size: Int
}

"""
Execution details
"""
type ExecutionDetails {
    duration_ms: Float
    memory_peak: Int
    memory_usage: Int
}

"""
Security log filter input
"""
input SecurityLogFilterInput {
    user_id: ID
    email: String
    operation: String
    module: String
    status: SecurityLogStatus
    ip_address: String
    date_from: DateTime
    date_to: DateTime
    search: String
}

"""
Security log ordering input
"""
input SecurityLogOrderByInput {
    column: SecurityLogOrderByColumn!
    order: SortOrder!
}

"""
Available columns for ordering security logs
"""
enum SecurityLogOrderByColumn {
    ID
    USER_ID
    OPERATION
    MODULE
    IP_ADDRESS
    STATUS
    CREATED_AT
}

"""
Security log status enum
"""
enum SecurityLogStatus {
    success
    client_error
    server_error
    graphql_error
    unknown
}

"""
Sort order enum
"""
enum SortOrder {
    ASC
    DESC
}

"""
Real Estate Agency
"""
type RealEstate {
    "Unique identifier"
    id: ID!

    "Agency name"
    name: String!

    "Agency description"
    description: String

    "Contact email"
    email: String!

    "Contact phone"
    phone: String

    "Website URL"
    website: String

    "Fantasy name"
    fantasy_name: String

    "CNPJ (Brazilian tax ID)"
    cnpj: String!

    "CRECI (Real estate license)"
    creci: String

    "State registration"
    state_registration: String

    "Legal representative"
    legal_representative: String

    "Whether the agency is active"
    active: Boolean

    "Creation timestamp"
    created_at: DateTime!

    "Last update timestamp"
    updated_at: DateTime!

    # "Main address information"
    # address: RealEstateAddress @field(resolver: "Modules\\RealEstate\\GraphQL\\Queries\\RealEstateAddress")

    "All addresses"
    addresses: [RealEstateAddress!]! @hasMany

    # "Branch addresses only"
    # branches: [RealEstateAddress!] @field(resolver: "Modules\\RealEstate\\GraphQL\\Queries\\RealEstateBranches")
}

"""
Real Estate Address
"""
type RealEstateAddress {
    "Unique identifier"
    id: ID!
    
    "Address type (headquarters or branch)"
    type: String!
    
    "Street name"
    street: String!

    "Street number"
    number: String!

    "Complement"
    complement: String

    "Neighborhood"
    neighborhood: String!

    "City"
    city: String!

    "State"
    state: String!

    "ZIP code"
    zip_code: String!

    "Country"
    country: String
    
    "Whether the address is active"
    active: Boolean!
    
    "Creation timestamp"
    created_at: DateTime!
    
    "Last update timestamp"
    updated_at: DateTime!
}

"""
Real Estate Address Input
"""
input RealEstateAddressInput {
    "Street name"
    street: String! @rules(apply: ["required", "string", "max:255"])

    "Street number"
    number: String! @rules(apply: ["required", "string", "max:20"])

    "Complement"
    complement: String @rules(apply: ["nullable", "string", "max:255"])

    "Neighborhood"
    neighborhood: String! @rules(apply: ["required", "string", "max:255"])

    "City"
    city: String! @rules(apply: ["required", "string", "max:255"])

    "State"
    state: String! @rules(apply: ["required", "string", "max:100"])

    "ZIP code"
    zip_code: String! @rules(apply: ["required", "string", "max:20"])

    "Country"
    country: String @rules(apply: ["nullable", "string", "max:100"])
}

"""
Input for updating a real estate agency
"""
input UpdateRealEstateInput {
    "Agency name"
    name: String @rules(apply: ["string", "max:255"])

    "Agency description"
    description: String @rules(apply: ["nullable", "string", "max:1000"])

    "Contact email"
    email: String @rules(apply: ["email", "unique:real_estates,email"])

    "Contact phone"
    phone: String @rules(apply: ["nullable", "string", "max:20"])

    "Website URL"
    website: String @rules(apply: ["nullable", "url", "max:255"])

    "Fantasy name"
    fantasy_name: String @rules(apply: ["nullable", "string", "max:255"])

    "CNPJ (Brazilian tax ID)"
    cnpj: String @rules(apply: ["string", "size:14", "unique:real_estates,cnpj"])

    "CRECI (Real estate license)"
    creci: String @rules(apply: ["nullable", "string", "max:50"])

    "State registration"
    state_registration: String @rules(apply: ["nullable", "string", "max:50"])

    "Legal representative"
    legal_representative: String @rules(apply: ["nullable", "string", "max:255"])

    "Whether the agency is active"
    active: Boolean

    "Address information"
    address: RealEstateAddressInput
}

"""
Paginated real estate agencies
"""
type RealEstatePaginator {
    "Pagination metadata"
    paginatorInfo: PaginatorInfo!

    "List of real estate agencies"
    data: [RealEstate!]!
}

# Module schemas are registered via ServiceProviders
# using the lighthouse.schema.register configuration
# DO NOT use #import for modules registered this way

"Input for creating a new real estate address"
input CreateRealEstateAddressInput {
    "Address type"
    type: String! @rules(apply: ["required", "string", "max:50"])
    
    "Street address"
    street: String! @rules(apply: ["required", "string", "max:255"])
    
    "Street number"
    number: String! @rules(apply: ["required", "string", "max:20"])
    
    "Complement"
    complement: String @rules(apply: ["nullable", "string", "max:100"])
    
    "Neighborhood"
    neighborhood: String! @rules(apply: ["required", "string", "max:100"])
    
    "City"
    city: String! @rules(apply: ["required", "string", "max:100"])
    
    "State"
    state: String! @rules(apply: ["required", "string", "max:50"])
    
    "ZIP/Postal code"
    zip_code: String! @rules(apply: ["required", "string", "max:10"])
    
    "Country"
    country: String = "BR" @rules(apply: ["nullable", "string", "max:50"])
    
    "Whether the address is active"
    active: Boolean = true @rules(apply: ["boolean"])
}

"Input for updating an existing real estate address"
input UpdateRealEstateAddressInput {
    "Address type"
    type: String @rules(apply: ["string", "max:50"])
    
    "Street address"
    street: String @rules(apply: ["string", "max:255"])
    
    "Street number"
    number: String @rules(apply: ["string", "max:20"])
    
    "Complement"
    complement: String @rules(apply: ["nullable", "string", "max:100"])
    
    "Neighborhood"
    neighborhood: String @rules(apply: ["string", "max:100"])
    
    "City"
    city: String @rules(apply: ["string", "max:100"])
    
    "State"
    state: String @rules(apply: ["string", "max:50"])
    
    "ZIP/Postal code"
    zip_code: String @rules(apply: ["string", "max:10"])
    
    "Country"
    country: String @rules(apply: ["nullable", "string", "max:50"])
    
    "Whether the address is active"
    active: Boolean @rules(apply: ["boolean"])
}
