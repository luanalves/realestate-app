"""
Main GraphQL Schema
This file combines all module schemas.
"""

scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar JSON @scalar(class: "App\\GraphQL\\Scalars\\JSON")

"""
The available pagination information.
"""
type PaginatorInfo {
    """
    Total count of available items.
    """
    count: Int!

    """
    Current page of the cursor.
    """
    currentPage: Int!

    """
    Index of the first item in the current page.
    """
    firstItem: Int

    """
    If collection has more pages.
    """
    hasMorePages: Boolean!

    """
    Index of the last item in the current page.
    """
    lastItem: Int

    """
    Last page number of the cursor.
    """
    lastPage: Int!

    """
    Number of items per page.
    """
    perPage: Int!

    """
    Total count of available items.
    """
    total: Int!
}

"""
User management related queries
"""
type Query {
    """
    Get currently authenticated user
    """
    me: User @auth
    
    """
    Get all users (requires authentication)
    """
    users: [User!]! @field(resolver: "Modules\\UserManagement\\GraphQL\\Queries\\Users")

    """
    Get a user by ID (requires authentication)
    """
    user(id: ID!): User @field(resolver: "Modules\\UserManagement\\GraphQL\\Queries\\User")

    """
    Get security logs with filters and pagination
    """
    securityLogs(
        filter: SecurityLogFilterInput
        orderBy: [SecurityLogOrderByInput!]
        first: Int = 20
        page: Int = 1
    ): SecurityLogsPaginated! @field(resolver: "Modules\\Security\\GraphQL\\Queries\\SecurityLogs")

    """
    Get a specific security log by ID
    """
    securityLog(id: ID!): SecurityLog @field(resolver: "Modules\\Security\\GraphQL\\Queries\\SecurityLogQuery")

    """
    Get security log statistics/summary
    """
    securityLogStats(
        filter: SecurityLogFilterInput
    ): SecurityLogStats! @field(resolver: "Modules\\Security\\GraphQL\\Queries\\SecurityLogStats")
}

type Mutation {
    """
    Create a new user
    """
    createUser(input: CreateUserInput!): User @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\CreateUser")
    
    """
    Update an existing user
    """
    updateUser(id: ID!, input: UpdateUserInput!): User @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\UpdateUser")
    
    """
    Delete a user
    """
    deleteUser(id: ID!): DeleteUserResponse @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\DeleteUser")

    """
    Login a user
    """
    login(email: String!, password: String!): LoginResponse!
        @field(resolver: "Modules\\UserManagement\\GraphQL\\Mutations\\Login")
}

# User Management Types
input CreateUserInput {
    name: String!
    email: String!
    password: String!
    role_id: ID!
}

input UpdateUserInput {
    name: String
    email: String
    password: String
    role_id: ID
}

"""
User object
"""
type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
    role: Role @belongsTo
}

"""
Role object
"""
type Role {
    id: ID!
    name: String!
    display_name: String
    description: String
    created_at: DateTime!
    updated_at: DateTime!
    
    users: [User!]! @hasMany
}

"""
Login response object
"""
type LoginResponse {
    access_token: String!
    token_type: String!
    expires_in: Int!
    user: User!
}

"""
Delete user response object
"""
type DeleteUserResponse {
    success: Boolean!
    message: String!
}

# Security Module Types
"""
Security log entry
"""
type SecurityLog {
    id: ID!
    uuid: String!
    user_id: ID
    email: String
    operation: String!
    module: String
    ip_address: String!
    status: SecurityLogStatus!
    created_at: DateTime!
    updated_at: DateTime!
    
    """
    Related user (if exists)
    """
    user: User @belongsTo
    
    """
    Detailed log information from MongoDB
    """
    details: SecurityLogDetails @field(resolver: "Modules\\Security\\GraphQL\\Queries\\SecurityLogDetails")
}

"""
Paginated security logs response
"""
type SecurityLogsPaginated {
    data: [SecurityLog!]!
    paginatorInfo: PaginatorInfo!
}

"""
Security log statistics
"""
type SecurityLogStats {
    total_requests: Int!
    unique_users: Int!
    success_rate: Float!
    top_operations: [OperationStat!]!
    top_modules: [ModuleStat!]!
    requests_by_status: [StatusStat!]!
    requests_by_hour: [HourStat!]!
}

"""
Operation statistics
"""
type OperationStat {
    operation: String!
    count: Int!
    percentage: Float!
}

"""
Module statistics
"""
type ModuleStat {
    module: String!
    count: Int!
    percentage: Float!
}

"""
Status statistics
"""
type StatusStat {
    status: SecurityLogStatus!
    count: Int!
    percentage: Float!
}

"""
Hourly request statistics
"""
type HourStat {
    hour: Int!
    count: Int!
}

"""
Detailed log information from MongoDB
"""
type SecurityLogDetails {
    request: RequestDetails
    response: ResponseDetails
    execution: ExecutionDetails
}

"""
Request details
"""
type RequestDetails {
    headers: JSON
    variables: JSON
    query: String
    user_agent: String
    timestamp: String
}

"""
Response details
"""
type ResponseDetails {
    status_code: Int
    headers: JSON
    data: JSON
    size: Int
}

"""
Execution details
"""
type ExecutionDetails {
    duration_ms: Float
    memory_peak: Int
    memory_usage: Int
}

"""
Security log filter input
"""
input SecurityLogFilterInput {
    user_id: ID
    email: String
    operation: String
    module: String
    status: SecurityLogStatus
    ip_address: String
    date_from: DateTime
    date_to: DateTime
    search: String
}

"""
Security log ordering input
"""
input SecurityLogOrderByInput {
    column: SecurityLogOrderByColumn!
    order: SortOrder!
}

"""
Available columns for ordering security logs
"""
enum SecurityLogOrderByColumn {
    ID
    USER_ID
    OPERATION
    MODULE
    IP_ADDRESS
    STATUS
    CREATED_AT
}

"""
Security log status enum
"""
enum SecurityLogStatus {
    success
    client_error
    server_error
    graphql_error
    unknown
}

"""
Sort order enum
"""
enum SortOrder {
    ASC
    DESC
}
